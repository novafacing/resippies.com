//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "cookbook")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: String,
    pub author: String,
    pub name: String,
    pub description: String,
    pub visibility: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Author",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbook_recipe::Relation::Recipe.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbook_recipe::Relation::Cookbook.def().rev())
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbook_contributor::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbook_contributor::Relation::Cookbook.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
