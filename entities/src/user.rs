//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use anyhow::{anyhow, bail, Result};
use async_trait::async_trait;
use axum_session_auth::{Authentication, HasPermission};
use chrono::Utc;
use sea_orm::{entity::prelude::*, Set, SqlxSqliteConnector};
use serde::{Deserialize, Serialize};
use sqlx::SqlitePool;
use util::{code, uuid};

use crate::{role::Role, Id};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Id,
    pub username: String,
    pub email: String,
    pub password_hash: String,
    pub code: String,
    pub verified: bool,
    pub role: Role,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cookbook::Entity")]
    Cookbook,
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
}

impl Related<super::cookbook::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbook_contributor::Relation::Cookbook.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbook_contributor::Relation::User.def().rev())
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_contributor::Relation::Recipe.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipe_contributor::Relation::User.def().rev())
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(uuid()),
            code: Set(code()),
            verified: Set(false),
            ..ActiveModelTrait::default()
        }
    }

    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.created_at = Set(Utc::now());
            self.updated_at = Set(Utc::now());
        } else {
            self.updated_at = Set(Utc::now());
        }

        Ok(self)
    }
}

#[async_trait]
impl HasPermission<SqlitePool> for Model {
    async fn has(&self, perm: &str, _pool: &Option<&SqlitePool>) -> bool {
        match &perm[..] {
            // "Token::UseAdmin" => true,
            _ => false,
        }
    }
}

#[async_trait]
impl Authentication<Model, Id, SqlitePool> for Model {
    async fn load_user(id: Id, pool: Option<&SqlitePool>) -> Result<Self> {
        if let Some(pool) = pool {
            let pool = pool.clone();
            let db = SqlxSqliteConnector::from_sqlx_sqlite_pool(pool);
            Entity::find_by_id(id)
                .one(&db)
                .await?
                .ok_or_else(|| anyhow!("User not found"))
        } else {
            bail!("No database connection")
        }
    }

    fn is_authenticated(&self) -> bool {
        true
    }

    fn is_active(&self) -> bool {
        self.verified
    }

    fn is_anonymous(&self) -> bool {
        false
    }
}
