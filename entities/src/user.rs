//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: String,
    pub username: String,
    pub email: String,
    pub password_hash: String,
    pub code: String,
    pub verified: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cookbook::Entity")]
    Cookbook,
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
}

impl Related<super::cookbook::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbook_contributor::Relation::Cookbook.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbook_contributor::Relation::User.def().rev())
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_contributor::Relation::Recipe.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipe_contributor::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
