//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use anyhow::{anyhow, bail, Result};
use async_trait::async_trait;
use axum_session_auth::{Authentication, HasPermission};
use chrono::Utc;
use sea_orm::{entity::prelude::*, Set, SqlxSqliteConnector};
use serde::{Deserialize, Serialize};
use sqlx::SqlitePool;
use tracing::debug;
use util::{code, hash_password, uuid};

use crate::{prelude::Theme, role::Role, Id};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Id,
    pub username: String,
    pub email: String,
    pub password_hash: String,
    pub code: String,
    pub verified: bool,
    pub role: Role,
    pub theme: Theme,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cookbook::Entity")]
    Cookbook,
    #[sea_orm(has_many = "super::recipe::Entity")]
    Recipe,
}

impl Related<super::cookbook::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbook_contributor::Relation::Cookbook.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbook_contributor::Relation::User.def().rev())
    }
}

impl Related<super::recipe::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipe_contributor::Relation::Recipe.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipe_contributor::Relation::User.def().rev())
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(uuid()),
            code: Set(code()),
            verified: Set(false),
            role: Set(Role::default()),
            theme: Set(Theme::default()),
            ..ActiveModelTrait::default()
        }
    }

    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.created_at = Set(Utc::now());
            self.updated_at = Set(Utc::now());
        } else {
            self.updated_at = Set(Utc::now());
        }

        Ok(self)
    }
}

impl ActiveModel {
    pub fn anonymous() -> Self {
        ActiveModel {
            id: Set(Id::from(Uuid::nil())),
            username: Set("Anonymous".to_owned()),
            email: Set("".to_owned()),
            password_hash: Set("".to_owned()),
            code: Set("".to_owned()),
            verified: Set(true),
            role: Set(Role::Anonymous),
            theme: Set(Theme::default()),
            ..Default::default()
        }
    }
}

#[async_trait]
impl HasPermission<SqlitePool> for Model {
    async fn has(&self, perm: &str, _pool: &Option<&SqlitePool>) -> bool {
        debug!("Checking if user has permission {}", perm);
        match &perm[..] {
            // "Token::UseAdmin" => true,
            // We aren't using permissions yet, so all users have all permissions
            _ => true,
        }
    }
}

#[async_trait]
impl Authentication<Model, Id, SqlitePool> for Model {
    async fn load_user(id: Id, pool: Option<&SqlitePool>) -> Result<Self> {
        debug!("Loading user with id {}", id);
        if let Some(pool) = pool {
            let pool = pool.clone();
            let db = SqlxSqliteConnector::from_sqlx_sqlite_pool(pool);
            Entity::find_by_id(id)
                .one(&db)
                .await?
                .ok_or_else(|| anyhow!("User not found"))
        } else {
            bail!("No database connection")
        }
    }

    fn is_authenticated(&self) -> bool {
        debug!("Checking if authenticated");
        self.role != Role::Anonymous
    }

    fn is_active(&self) -> bool {
        debug!("Checking if active");
        self.role != Role::Anonymous
    }

    fn is_anonymous(&self) -> bool {
        debug!("Checking if anonymous");
        self.role == Role::Anonymous
    }
}

impl Model {
    pub fn display(&self, public: bool) -> Self {
        if public {
            Self {
                // When displaying publicly we don't want to show anything but the username
                // id and creation time
                password_hash: "".to_owned(),
                code: "".to_owned(),
                email: "".to_owned(),
                verified: false,
                updated_at: DateTimeUtc::default(),
                ..self.clone()
            }
        } else {
            Self {
                // We won't show the password hash even to the logged in user in case of
                // cookie jacking or something, and we can't show them their code, of course
                password_hash: "".to_owned(),
                code: "".to_owned(),
                ..self.clone()
            }
        }
    }
}
