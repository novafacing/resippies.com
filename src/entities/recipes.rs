//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "recipes"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub author: String,
    pub name: String,
    pub description: Option<String>,
    pub visibility: Option<String>,
    pub created_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Author,
    Name,
    Description,
    Visibility,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Identities,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::Author => ColumnType::String(None).def(),
            Self::Name => ColumnType::String(None).def(),
            Self::Description => ColumnType::String(None).def().null(),
            Self::Visibility => ColumnType::String(None).def().null(),
            Self::CreatedAt => ColumnType::Timestamp.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Identities => Entity::belongs_to(super::identities::Entity)
                .from(Column::Author)
                .to(super::identities::Column::Id)
                .into(),
        }
    }
}

impl Related<super::ingredients::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipes_ingredients::Relation::Ingredients.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipes_ingredients::Relation::Recipes.def().rev())
    }
}

impl Related<super::steps::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipes_steps::Relation::Steps.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipes_steps::Relation::Recipes.def().rev())
    }
}

impl Related<super::cookbooks::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbooks_recipes::Relation::Cookbooks.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cookbooks_recipes::Relation::Recipes.def().rev())
    }
}

impl Related<super::identities::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipes_contributors::Relation::Identities.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::recipes_contributors::Relation::Recipes.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
