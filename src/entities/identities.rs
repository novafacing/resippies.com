//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "identities"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub username: String,
    pub email: String,
    pub password_hash: String,
    pub code: String,
    pub verified: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Username,
    Email,
    PasswordHash,
    Code,
    Verified,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Cookbooks,
    Recipes,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::Username => ColumnType::String(None).def(),
            Self::Email => ColumnType::String(None).def(),
            Self::PasswordHash => ColumnType::String(None).def(),
            Self::Code => ColumnType::String(None).def(),
            Self::Verified => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Cookbooks => Entity::has_many(super::cookbooks::Entity).into(),
            Self::Recipes => Entity::has_many(super::recipes::Entity).into(),
        }
    }
}

impl Related<super::cookbooks::Entity> for Entity {
    fn to() -> RelationDef {
        super::cookbooks_contributors::Relation::Cookbooks.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::cookbooks_contributors::Relation::Identities
                .def()
                .rev(),
        )
    }
}

impl Related<super::recipes::Entity> for Entity {
    fn to() -> RelationDef {
        super::recipes_contributors::Relation::Recipes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::recipes_contributors::Relation::Identities
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
